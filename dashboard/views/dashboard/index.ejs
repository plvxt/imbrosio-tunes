<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Remix Web Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.3/flowbite.min.js"></script>
  <link rel="stylesheet" href="/dashboard/style.css" />
  <link rel="icon" href="../assets/icon.png" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/css/font-awesome.css" rel="stylesheet" type='text/css'>
  <style id="styleContainer">
  .main-container {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    width: 100%;
    padding: 1.5rem;
    gap: 1.5rem;
    color: white;
  }
  .main {
    color: white;

  }
  .remix-player {
    flex-grow: 3;
  }
  .sidebar {
    flex-grow: 2;
    background-color: rgb(31, 41, 55);
    border-radius: 5px;
    box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.4);
    padding: 1rem;
  }
  .sidebar *, ul {
    /*list-style: inside;*/
    text-align: left;
    margin-left: 0.5rem;
  }
  .sidebar > h1 {
    font-size: 130%;
  }

  .caret {
    cursor: pointer;
    user-select: none;
    float: left;
  }
  .caret::before {
    content: "\25B6";
    color: white;
    display: inline-block;
    margin-right: 6px;
    transition: transform 0.2s;
  }
  .caret-down::before {
    transform: rotate(90deg);
  }
  .nested {
    display: none;
  }
  .active {
    display: block;
  }
  .selected {
    border-radius: 5px;
    box-shadow: 0px 0px 4px #088395;
    transition: all 0.2s;
    border: 1px solid #088395;
    box-shadow: 0px 2px 4px #088395;
  }
  #channels * {
    padding: 0.1rem;
    padding-left: 0.35rem;
    cursor: pointer;
  }
  #channels { /* TODO: Redesign scrollbar */
    list-style-type: disc;
    margin-left: 1.3rem;
    max-height: 60vh;
    overflow: auto;
  }
  .button {
    border-radius: 5px;
    background-color: rgb(19, 25, 39);
    padding: 5px;
  }
  #confirm:not([disabled]) {
    background-color: #379237;
    color: black;
  }
  ul.nested > li {
    cursor: pointer;
  }
  @media (max-width: 770px) {
    .main-container {
      flex-direction: column;
      align-items: center;
    }
  }
  </style>
</head>

<body class="bg-gray-900">
  <%- include("components/navbar"); -%>
  <section class="main">
    <h1 style="font-size: 200%" class="self-center text-2xl font-semibold whitespace-nowrap dark:text-pink-600">Remix Dashboard</h2>
    <br />
    <div class="main-container">
      <div class="sidebar">
        <h1>Your Servers</h1>
        <br />
        <ul id="server-list">
          Loading...
        </ul>
      </div>
      <%- include("components/player"); %>
    </div>
    <p>
      Please note that the dashboard is experimental at the moment and that things might not work the way you expect them to. <br />
      Feel free to report bugs on our <a href="https://app.revolt.chat/invite/Remix" style="text-decoration: underline" target="_blank">Revolt Server <i class="fa-solid fa-arrow-up-right-from-square"></i></a>
    </p>
  </section>

  <div id="cSelect" style="backdrop-filter: blur(2px); display: flex; display: none; position: fixed; top: 0; left: 0; z-index: 100; width: 100%; height: 100%; align-items: center; justify-content: center">
    <div style="display: flex; flex-direction: column; position: relative; padding: 1.5rem; background-color: rgb(31, 41, 55); border-radius: 5px; box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.4); color: white">
      <h1 id="sname" style="text-align: center; font-size: 120%">Text Channel Selection</h1>
      <a style="position: absolute; right: 1.5rem; top: 1rem;" href="javascript:;" onclick="this.parentElement.parentElement.style.display='none'">X</a>
      <p>
        Please select a text channel. Messages about the player, like song announcements, are going to be sent in there.
      </p>
      <br />
      <ul id="channels">

      </ul>
      <br />
      <button id="confirm" class="button" disabled onclick="confirmCallback(this)">Join</button>
    </div>
  </div>

  <%- include("components/notifications"); %>

  <script src="/socket.io/socket.io.js"></script>
  <script>
  const USERID = "<%= user.id %>"; // provided by back-end

  const socket = io();
  socket.on("info", (info) => {
    console.log(info);
    if (info.currSong) update(info.currSong);
  });
  socket.on("joined", console.log);
  socket.on("left", console.log);
  socket.on("startplay", (vid) => {
    update(vid);
  });

  const tChannels = document.getElementById("channels");
  const tSelect = document.getElementById("cSelect");
  const tName = document.getElementById("sname");
  const tConfirm = document.getElementById("confirm");
  const css = document.getElementById("styleContainer");
  var confirmCallback = (btn) => console.warn("Something is wrong.");
  tSelect.addEventListener("click", (e) => {
    if (event.target.matches("#cSelect *")) return;
    tSelect.style.display = "none";
  });

  const serverList = document.getElementById("server-list")
  const createListItem = (i, c=true, oc) => {
    const li = document.createElement("li");
    if (c) {
      const caret = document.createElement("span");
      caret.classList.add("caret");
      li.appendChild(caret);
    }
    if (i.icon) {
      li.style.listStyle = "none";
      css.sheet.insertRule("li[itemid='" + i.id + "']::before {content:''; display: inline-block; background-image:url(" + i.icon + "); background-size: cover; aspect-ratio: 1/1; height: 1.5rem; margin-right: 0.2rem; margin-left: 0.2rem; padding: 0;}");
    }
    li.appendChild(document.createTextNode(i.name));
    li.onclick = oc;
    li.setAttribute("itemId", i.id);

    return li;
  }
  window.addEventListener("load", () => {
    socket.emit("info", USERID);

    fetch("/api/servers").then(res => res.json()).then((servers) => {
      serverList.innerHTML = "";
      servers.forEach(s => {
        const server = createListItem(s);
        if (s.voiceChannels.length == 0) return serverList.appendChild(server);

        const list = document.createElement("ul");
        list.classList.add("nested");
        list.style.listStyle = "inside";
        s.voiceChannels.forEach(c => {
          const channel = createListItem(c, false, function() {initJoin(this);});
          list.appendChild(channel);
        });
        server.appendChild(list);
        serverList.appendChild(server);
      });

      const carets = document.getElementsByClassName("caret");
      for (let i = 0; i < carets.length; i++) {
        carets[i].onclick = function() {
          const state = this.getAttribute("state") || "up";
          this.parentElement.querySelector(".nested").classList.toggle("active");
          this.classList.toggle("caret-down");
          if (state == "up") fetchVoice(this.parentElement);
          this.setAttribute("state", (state == "up") ? "down" : "up");
        }
      }
    });
  });

  const fetchVoice = (list) => {
    fetch("/api/server/" + list.getAttribute("itemid") + "/voice").then(res => res.json()).then(data => {
      data.forEach(c => {
        if (c.users.length == 0) return;
        const l = document.createElement("ul");
        l.style.listStyle = "inside";
        l.append(...c.users.map(u => createListItem(u, false)));
        const cList = list.querySelector("li[itemid='" + c.id + "']");
        if (cList.children.length > 0) cList.children[0].remove();
        cList.appendChild(l);
      });
    });
  }
  const selectTextChannel = (server, n) => {
    return new Promise(async (res) => {
      const channels = await (await fetch("/api/server/" + server + "/channels")).json();
      if (!channels.success) return res(false);
      tSelect.style.display = "flex";
      tChannels.innerHTML = "";
      tConfirm.disabled = true;
      channels.data.filter(c => c.type == "TextChannel").forEach((c) => {
        const i = createListItem(c, false);
        i.onclick = function() { s(this); this.classList.add("selected"); };
        tChannels.appendChild(i);
      });
      var selected = null;
      const s = (li) => {
        if (selected) selected.classList.remove("selected");
        selected = li;
        tConfirm.disabled = false;
        tConfirm.setAttribute("channel", li.getAttribute("itemid"));
      }
      confirmCallback = (btn) => {
        if (!btn.getAttribute("channel")) return console.warn("An error occured");
        tSelect.style.display = "none";
        tConfirm.disabled = true;
        res(btn.getAttribute("channel"));
      }
    });
  }
  const initJoin = async (li) => {
    const channel = li.getAttribute("itemid");
    const server = li.parentElement.parentElement.getAttribute("itemid");
    const text = await selectTextChannel(server);
    const notif = addNotification("Joining", "Attempting to join; View progress in the selected text channel", 5000);
    post("/api/voice/" + channel + "/join", { text: text }).then(r=>r.json()).then(d => {
      if (!d.success) return addNotification("Joining Failed", "Reason: " + d.message, 7000, "error");
      notif.description = "Success; [Message]: " + d.message;
    });
  };
  </script>

  <%- include("components/footer"); -%>
</body>
</html>
