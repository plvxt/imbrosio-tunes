<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Remix Web Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
  <link rel="stylesheet" href="/dashboard/style.css" />
  <link rel="icon" href="../assets/icon.png" />
  <style>
  .main-container {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    width: 100%;
    padding: 1.5rem;
    gap: 1.5rem;
    color: white;
  }
  .remix-player {
    flex-grow: 3;
  }
  .sidebar {
    flex-grow: 2;
    background-color: rgb(31, 41, 55);
    border-radius: 5px;
    box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.4);
    padding: 1rem;
  }
  .sidebar *, ul {
    /*list-style: inside;*/
    text-align: left;
    margin-left: 0.5rem;
  }
  .sidebar > h1 {
    font-size: 130%;
  }

  .caret {
    cursor: pointer;
    user-select: none;
  }
  .caret::before {
    content: "\25B6";
    color: white;
    display: inline-block;
    margin-right: 6px;
    transition: transform 0.2s;
  }
  .caret-down::before {
    transform: rotate(90deg);
  }
  .nested {
    display: none;
  }
  .active {
    display: block;
  }
  </style>
</head>

<body class="bg-gray-900">
  <%- include("components/navbar"); -%>
  <section class="main">
    <h1 style="font-size: 200%" class="self-center text-2xl font-semibold whitespace-nowrap dark:text-pink-600">Remix Dashboard</h2>
    <br />
    <div class="main-container">
      <div class="sidebar">
        <h1>Your Servers</h1>
        <ul id="server-list">
          Loading...
        </ul>
      </div>
      <%- include("components/player"); %>
    </div>
  </section>

  <%- include("components/notifications"); %>

  <script src="/socket.io/socket.io.js"></script>
  <script>
  const USERID = "<%= user.id %>"; // provided by back-end

  const socket = io();
  socket.on("info", (info) => {
    console.log(info);
    if (info.currSong) update(info.currSong);
  });
  socket.on("joined", console.log);
  socket.on("left", console.log);
  socket.on("startplay", (vid) => {
    update(vid);
  });

  const serverList = document.getElementById("server-list")
  const createListItem = (i, c=true) => {
    const li = document.createElement("li");
    if (c) {
      const caret = document.createElement("span");
      caret.classList.add("caret");
      li.appendChild(caret);
    }
    li.appendChild(document.createTextNode(i.name));
    li.setAttribute("itemId", i.id);

    return li;
  }
  window.addEventListener("load", () => {
    socket.emit("info", USERID);

    fetch("/api/servers").then(res => res.json()).then((servers) => {
      serverList.innerHTML = "";
      servers.forEach(s => {
        const server = createListItem(s);
        if (s.voiceChannels.length == 0) return serverList.appendChild(server);

        const list = document.createElement("ul");
        list.classList.add("nested");
        list.style.listStyle = "inside";
        s.voiceChannels.forEach(c => {
          const channel = createListItem(c, false);
          list.appendChild(channel);
        });
        server.appendChild(list);
        serverList.appendChild(server);
      });

      const carets = document.getElementsByClassName("caret");
      for (let i = 0; i < carets.length; i++) {
        carets[i].onclick = function() {
          const state = this.getAttribute("state") || "up";
          this.parentElement.querySelector(".nested").classList.toggle("active");
          this.classList.toggle("caret-down");
          if (state == "up") fetchVoice(this.parentElement);
          this.setAttribute("state", (state == "up") ? "down" : "up");
        }
      }
    });
  });

  const fetchVoice = (list) => {
    fetch("/api/server/" + list.getAttribute("itemid") + "/voice").then(res => res.json()).then(data => {
      data.forEach(c => {
        if (c.users.length == 0) return;
        const l = document.createElement("ul");
        l.style.listStyle = "inside";
        l.append(...c.users.map(u => createListItem(u, false)));
        const cList = list.querySelector("li[itemid='" + c.id + "']");
        if (cList.children.length > 0) cList.children[0].remove();
        cList.appendChild(l);
      });
    });
  }
  </script>

  <%- include("components/footer"); -%>
</body>

</html>
