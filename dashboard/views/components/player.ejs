<div style="
  padding: 1.5rem;
  border-radius: 5px;
  background-color: #1F2937;
  border-color: #374151;
  diplay: flex;
  justify-content: center">
  <h1 style="padding-bottom: 1.5rem; font-size: 200%; color: white">Currently Playing</h1>

  <div style="height: 10rem; position: relative; overflow: hidden">
    <img id="thumbnail" style="border-radius: 5px; object-fit: cover; object-position: left center; aspect-ratio: 4 / 1; height: 100%" src="https://i.ytimg.com/vi/hJqYc62NCKo/hq720.jpg"/>
    <div style="display: flex; align-items: center; flex-direction: column; justify-content: center; box-shadow: -6px 0px 12px 5px rgba(255,255,255,0.6); border-radius: 0 5px 5px 0; height: 100%; aspect-ratio: 3 / 1; background-color: rgba(255, 255, 255, 0.6); position: absolute; right: 0; top: 0">
      <p>
        Play | Pause | Placeholder
      </p>
      <p>
        WIP
      </p>
    </div>
  </div>
</div>
<script>
  const bgrdImg = document.getElementById("thumbnail");
  const pBgrd = bgrdImg.parentElement.children[1];
  bgrdImg.onload = () => {
    const c = getAverageRGB(bgrdImg);
    pBgrd.style.backgroundColor = `rgba(${c.r}, ${c.g}, ${c.b}, 0.6)`;
    pBgrd.style.boxShadow = `rgb(${c.r} ${c.g} ${c.b} / 60%) -6px 0px 12px 5px`
    if (!isLight(c)) pBgrd.style.color = "white";
  }
  function isLight(rgb) {
    const brightness = ((rgb.r * 299) + (rgb.g * 587) + (rgb.b * 114)) / 1000;
    return brightness > 155;
  }
  function getAverageRGB(imgEl) {

    var blockSize = 5, // only visit every 5 pixels
        defaultRGB = {r:255,g:255,b:255}, // for non-supporting envs
        canvas = document.createElement('canvas'),
        context = canvas.getContext && canvas.getContext('2d'),
        data, width, height,
        i = -4,
        length,
        rgb = {r:0,g:0,b:0},
        count = 0;

    if (!context) {
        return defaultRGB;
    }

    height = canvas.height = imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;
    width = canvas.width = imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;

    context.drawImage(imgEl, 0, 0);

    try {
        data = context.getImageData(0, 0, width, height);
    } catch(e) {
        return defaultRGB;
    }

    length = data.data.length;

    while ( (i += blockSize * 4) < length ) {
        ++count;
        rgb.r += data.data[i];
        rgb.g += data.data[i+1];
        rgb.b += data.data[i+2];
    }

    // ~~ used to floor values
    rgb.r = ~~(rgb.r/count);
    rgb.g = ~~(rgb.g/count);
    rgb.b = ~~(rgb.b/count);

    return rgb;
  }
  function update(url) {
    bgrdImg.src = "/api/imageProxy?url=" + encodeURIComponent(url);
  }
</script>
